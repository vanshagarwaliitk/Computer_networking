SBOX = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

INV_SBOX = [
    [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
    [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
    [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
    [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
    [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
    [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
    [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
    [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
    [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
    [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
    [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
    [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
    [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
    [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
    [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D],
]

RCON = [
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
]

## Input: 1-D byte array
## Output: 2-D byte matrix
def to_matrix(data):
    ### Your code starts ###
    # print("I am here")
    matrix = [[0 for i in range(4)] for j in range(4)]
    for i in range(0,len(data)):
        n = i//4
        m = i%4
        # print(n,m)
        matrix[m][n] = data[i]
    ### Your code ends ###
    return matrix

## Input: 2-D byte matrix
## Output: 1-D byte array
def to_array(matrix):
    ### Your code starts ###
    array=[]
    for i in range(0,4):
        for j in range(0,4):
           array.append(matrix[j][i])


    ### Your code ends ###
    return array

## Input: 2-D byte matrix input block
## Input: 2-D byte matrix key
## Output: 2-D byte matrix output block 
def AddRoundKey(matrix_input, matrix_key):
    matrix_output = [[0 for _ in range(4)] for _ in range(4)]
    ### Your code starts ###
    for i in range(0,4):
        for j in range(0,4):
            matrix_output[i][j] = matrix_input[i][j]^matrix_key[i][j]
    
    ### Your code ends ###
    return matrix_output

## Input: 2-D byte matrix
## Output: 2-D byte matrix
def SubBytes(matrix):
    ### Your code starts ###
    for i in range(0,4):
       for j in range(0,4):
           row = matrix[i][j] >> 4
           col = matrix[i][j] & 0x0F
           matrix[i][j] = SBOX[row][col]
    ### Your code ends ###
    return matrix

## Input: 2-D byte matrix
## Output: 2-D byte matrix
def SubBytes_inv(matrix):
    ### Your code starts ###
    for i in range(0,4):
        for j in range(0,4):
            row = matrix[i][j] >> 4
            col = matrix[i][j] & 0x0F
            matrix[i][j] = INV_SBOX[row][col]
    ### Your code ends ###
    return matrix

## Input: 2-D byte matrix
## Output: 2-D byte matrix
def ShiftRows(matrix):
    ### Your code starts ###
    for i in range(0,4):
        row = matrix[i]
        chft_row = row[i:]+row[:i]
        matrix[i] = chft_row
    ### Your code ends ###
    return matrix

## Input: 2-D byte matrix
## Output: 2-D byte matrix
def ShiftRows_inv(matrix):
    ### Your code starts ###
    for i in range(0,4):
        row = matrix[i]
        chft_row = row[-i:]+row[:-i]
        matrix[i] = chft_row
    ### Your code ends ###
    return matrix

## Input: 2-D byte matrix
## Output: 2-D byte matrix
def MixColumns(matrix):
    ### Your code starts ###
    for j in range(0,4):
        a = [matrix[i][j] for i in range(0,4)]
        t = a[0]^a[1]^a[2]^a[3]

        def xtime(x):
            if(x & 0x80):
                result = ((x<<1)^0x1B)&0xFF
            else:
                result = (x<<1)&0xFF
            return result
        matrix[0][j] = a[0] ^ t ^ xtime(a[0] ^ a[1])
        matrix[1][j] = a[1] ^ t ^ xtime(a[1] ^ a[2])
        matrix[2][j] = a[2] ^ t ^ xtime(a[2] ^ a[3])
        matrix[3][j] = a[3] ^ t ^ xtime(a[3] ^ a[0])
                
    ### Your code ends ###
    return matrix

## Input: 2-D byte matrix
## Output: 2-D byte matrix
def MixColumns_inv(matrix):
    ### Your code starts ###
    for i in range(4):  
        a = [matrix[row][i] for row in range(4)]
        
        # Russian Peasant Method of Multiplication (Function)
        def gmul(x, y):
            result = 0
            for _ in range(8):
                if y & 1:
                    result ^= x
                hi_bit_set = x & 0x80
                x <<= 1
                if hi_bit_set:
                    x ^= 0x11B
                # # x &= 0xFF  # Ensure 8-bit result
                y >>= 1
            return result

        matrix[0][i] = (gmul(a[0], 0x0E) ^ gmul(a[1], 0x0B) ^ gmul(a[2], 0x0D) ^ gmul(a[3], 0x09)
        )
        matrix[1][i] = (gmul(a[0], 0x09) ^ gmul(a[1], 0x0E) ^ gmul(a[2], 0x0B) ^ gmul(a[3], 0x0D)
        )
        matrix[2][i] = (gmul(a[0], 0x0D) ^ gmul(a[1], 0x09) ^ gmul(a[2], 0x0E) ^ gmul(a[3], 0x0B)
        )
        matrix[3][i] = (gmul(a[0], 0x0B) ^ gmul(a[1], 0x0D) ^ gmul(a[2], 0x09) ^ gmul(a[3], 0x0E)
        )
    ### Your code ends ###
    return matrix

## Input: 1-D byte array for the last round key
## Input: int for the round of computed round key 
##        (say we are computing rk1, then we invoeke this function as compute_next_rk(rk0, 1))
## Output: 1-D byte array for the next round key

def compute_next_rk(current_rk, computed_round):
    rk_matrix = to_matrix(current_rk)
    ### Your code starts ###
    last_word = [rk_matrix[i][3] for i in range(4)]
    rot_word =  last_word[1:]+last_word[:1]
    sub_word = [SBOX[rot_word[i]>>4][rot_word[i] & 0x0F] for i in range(4)]
    # next_rk = [[0 for i in range(4)] for j in range(4)]
    sub_word[0] ^= RCON[computed_round]
    for i in range(4):
        rk_matrix[i][0] = sub_word[i]^rk_matrix[i][0]
   
    for col in range(1,4):
        for i in range(0,4):
            rk_matrix[i][col] = rk_matrix[i][col-1]^rk_matrix[i][col]

    ### Your code ends ###
    next_rk = to_array(rk_matrix)
    return next_rk

## Input: 1-D byte array for the master key
## Output: 2-D byte array list for the entire expanded key
def AES128_key_expansion(master_key):
    expanded_key = []
    ### Your code starts ###
    expanded_key =[[0 for i in range(16)] for j in range(11)]
    expanded_key[0] = master_key
    for i in range(1,11):
        expanded_key[i]=compute_next_rk(expanded_key[i-1], i)
    ### Your code ends ###

    return expanded_key

## Input: 1-D byte array for the master key
## Input: 1-D byte array for one block of plaintext
## Output: 1-D byte array for the ciphertext
def AES128_encrypt(master_key, plaintext):
    ### Your code starts ###
    matrix = to_matrix(plaintext)
    expanded_key = AES128_key_expansion(master_key)
    key0 = to_matrix(expanded_key[0])
    matrix = AddRoundKey(matrix,key0)
    for i in range(1,11):
        matrix = SubBytes(matrix)
        matrix = ShiftRows(matrix)
        if i<10:
          matrix = MixColumns(matrix)
        keyi = to_matrix(expanded_key[i])
        matrix = AddRoundKey(matrix,keyi)
    ciphertext = to_array(matrix)
    
    ### Your code ends ###
    return ciphertext

## Input: 1-D byte array for the master key
## Input: 1-D byte array for one block of ciphertext
## Output: 1-D byte array for the plaintext
def AES128_decrypt(master_key, ciphertext):
    ### Your code starts ###
    matrix = to_matrix(ciphertext)
    expanded_key = AES128_key_expansion(master_key)
    key10 = to_matrix(expanded_key[10])
    matrix = AddRoundKey(matrix,key10)
    for i in range(9,0,-1):
        matrix = ShiftRows_inv(matrix)
        matrix = SubBytes_inv(matrix)
        keyi = to_matrix(expanded_key[i])
        matrix = AddRoundKey(matrix,keyi)
        matrix = MixColumns_inv(matrix)
    matrix = ShiftRows_inv(matrix)
    matrix = SubBytes_inv(matrix)
    key0 = to_matrix(expanded_key[0])
    matrix = AddRoundKey(matrix,key0)
    plaintext = to_array(matrix)
    ### Your code ends ###
    return plaintext
